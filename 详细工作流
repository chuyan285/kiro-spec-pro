以下是4部工作流



1.需求文档编写


 0. 当用户提出需求时，首先判断是否为新需求。如果是新需求，则按照以下流程独立工作，必要时通过interactiveDialog工具向用户询问以收集信息。
 1. 需求澄清（Clarification）：
       目标：明确用户的需求，确保理解正确且完整。
       方法：通过提问（使用interactiveDialog）收集缺失信息，澄清模糊点。
       输出：清晰的需求描述（自然语言），作为下一步的输入。
 2.  需求文档（Requirements）：
       目标：使用EARS方法编写需求文档，明确验收标准。
      步骤：
        - 撰写需求文档，保存在 `specs/spec_name/requirements.md`
        - 格式：
          ```markdown
          # 需求文档
          ## 介绍
          [需求概述]
          ## 需求
          ### 需求1 - [需求名称]
          **用户故事：** [作为<角色>，我想要<功能>，以便<价值>]
          #### 验收标准
          使用EARS语法描述：
          1. While [可选前置条件], when [触发条件], the [系统] shall [系统响应]。
          2. ...
          ...
          ```
        - 示例： 
          - When 用户点击"保存"按钮，系统应将当前编辑的内容保存到数据库。
          - While 用户已登录，当用户访问个人主页时，系统应显示用户的个人信息。
     注意：询问用户是否满意开发文档



    2.技术方案设计


    技术方案设计（Design）：
     目标：根据需求文档，设计技术方案。
     步骤：
        - 编写设计文档，保存在 `specs/spec_name/design.md`
        - 内容应包含：
          - 架构设计（如模块划分、组件图）
          - 技术栈（使用的编程语言、框架、库等）
          - 技术选型理由（简要说明选择原因）
          - 数据库设计（如需要，包括ER图）
          - 接口设计（API定义、参数、返回值等）
          - 测试策略（单元测试、集成测试等）
          - 安全性考虑（如身份验证、数据加密等）
        - 使用mermaid图辅助说明（如流程图、序列图、类图等）。
     注意：询问用户是否满意技术方案



    3.任务拆分编写


    任务拆分（Task Breakdown）：
     目标：将需求分解为具体的可执行任务。
     步骤：
        - 编写任务列表，保存在 `specs/spec_name/tasks.md`
        - 格式：
          ```markdown
          # 实施计划
          - [ ] 任务ID: 任务标题
             - 描述：具体要做的事情（例如：编写XX模块的代码，实现XX功能）
             - 关联需求：需求1, 需求2 （引用需求文档中的需求编号）
          ...
          ```
        - 每个任务应足够小，以便于执行和跟踪。
     
        注意：询问用户是否满意任务列表


    4.执行与更新


    目标：独立执行任务，并更新状态。
     步骤：
        - 按照任务列表顺序执行任务。
        - 在任务列表中更新任务状态（例如将任务标记为`[x]`表示完成）。
        - 遇到问题或需要决策时，使用interactiveDialog工具向用户询问。
        - 定期向用户汇报进度。
 此外，整个流程中，每个阶段完成后都需要用户确认（通过interactiveDialog或用户主动输入），再进入下一阶段。
 注意：`spec_name`应根据需求内容命名（例如使用需求主题的小写和下划线形式）。
